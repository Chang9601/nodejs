const fs = require('fs');
const server = require('http').createServer();

server.on('request', (req, res) => {
  /* 
    fs 모듈의 readFile() 메서드는 비동기적으로 작동해도 전체 파일을 메모리에 로드한 후 데이터가 준비되면 데이터를 전송할 수 있기 때문에 파일이 큰 경우나 서버에 대량의 요청이 들어오는 경우에는 문제가 발생한다.
    fs.readFile('file.txt', (err, data) => {
      if (err) {
      console.log(err);
      }
      res.end(data);
    });
  */
  /*
    파일을 읽는 데 사용하는 읽기 가능한 스트림이 네트워크를 통해 응답 가능한 스트림으로 결과를 보내는 것보다 훨씬 빠르다.
    이로 인해 응답 스트림이 모든 수신 데이터를 처리할 수 없을 정도로 과부화되고 이 문제를 배압(back pressure)라고 부른다. 

    스트림은 데이터를 조각 단위(chunk)로 처리(읽기 및 쓰기)하여 전체 읽기 또는 쓰기 작업을 완료하지 않고도 메모리에 모든 데이터를 보관하지 않고 처리한다. 비디오와 같이 대량의 데이터를 처리하는 데 완벽하다.
    메모리 측면에서 데이터를 보관할 필요가 없으므로 더 효율적인 데이터 처리가 가능하며 시간 측면에서도 모든 데이터가 사용 가능할 때까지 기다릴 필요가 없다.
    모든 스트림은 EventEmitter 클래스의 인스턴스로 EventEmitter 클래스의 API를 사용할 수 있다.
  
    const readable = fs.createReadStream('file.txt');
  
    파일은 여러 조각으로 분할되며 스트림은 데이터 조각을 방출할 때마다 data 이벤트를 발생시킨다. 덩어리는 Buffer 인스턴스이다.
    흐르는(flowing) 모드에서는 데이터가 기본 시스템에서 자동으로 읽혀 이벤트를 통해 애플리케이션으로 가능한 빨리 제공된다.
    일시 중단(paused) 모드에서는 read() 메서드를 명시적으로 호출하여 스트림에서 데이터 덩어리를 읽어야 한다.
    모든 읽기 가능한 스트림은 일시 중단 모드에서 시작하지만 다음 중 하나의 방법으로 흐르는 모드로 전환할 수 있다.
    1. data 이벤트 핸들러 추가.
    2. resume() 메서드 호출.
    3. pipe() 메서드를 사용하여 데이터를 Writable 클래스로 보내기.
    readable.on('data', (chunk) => {
  
      http 모듈의 응답은 쓰기 가능한 스트림으로 write() 메서드를 사용하여 해당 스트림으로 모든 데이터 조각을 보낼 수 있다.
      파일을 스트리밍하고 있으므로 파일의 한 조각을 읽고 사용 가능해지자마자 응답 스트림의 write() 메서드를 사용해 즉시 클라이언트로 보낸다.
      다음 조각이 사용 가능하면 해당 조각이 전송되고 전체 파일이 읽히고 클라이언트로 스트리밍될 때까지 이 과정이 반복된다.
    
      res.write(chunk);
    });

    스트림이 파일에서 데이터를 읽는 작업을 완료하면 end 이벤트가 발생하고 end() 메서드를 호출한다.
    응답 역시 스트림이기 때문에 end() 메서드는 쓰기 가능한 스트림에 더 이상 데이터가 쓰여지지 않을 것을 명시한다.
    이미 write() 메서드를 사용하여 조각으로 모든 데이터를 전송했기 때문에 end() 메서드에는 아무것도 전달하지 않는다. 
    항상 data 이벤트와 end 이벤트를 연달아 사용해야 하는데 그렇지 않으면 응답이 클라이언트에 전송되지 않는다.
    readable.on('end', () => {
      res.end();
    });

    readable.on('error', (err) => {
      console.log(err);

      res.statusCode = 404;
      res.end('파일 없음!');
    });
  */

  /*
    파이프 연산자는 읽기 가능한 스트림에서 사용할 수 있으며 읽기 가능한 스트림의 출력을 즉시 쓰기 가능한 스트림의 입력으로 보낼 수 있다. 
    이것으로 배압 문제를 해결할 수 있는데 데이터가 들어오는 속도와 나가는 속도를 자동으로 처리하기 때문이다.
    읽기 가능한 스트림을 pipe() 메서드를 사용하고 쓰기 가능한 스트림을 넣어준다. 
  */
  const readable = fs.createReadStream('file.txt');
  // readableSrc.pipe(writeableDst)
  readable.pipe(res);
});
